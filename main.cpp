/*
  Copyright (C) CurlyMo

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

#ifdef ESP8266
  #include <Arduino.h>
#endif

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <time.h>
#include <unistd.h>
#include <stdint.h>
#include <string.h>
#include <ctype.h>
#include <assert.h>
#include <math.h>

#include "src/common/mem.h"
#include "src/common/strnicmp.h"
#include "src/common/uint32float.h"
#include "src/rules/rules.h"
#include "src/rules/stack.h"

#ifdef ESP8266
#include <Arduino.h>
#endif

#define OUTPUT_SIZE 512

#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  #define getval(a) \
    (((void *)(&a) >= (void *)MMU_SEC_HEAP) ? \
      (sizeof(a) == 1) ? mmu_get_uint8((uint8_t *)&a) : \
        (sizeof(a) == 2) ? mmu_get_uint16((uint16_t *)&a) : a : a)

  #define setval(a, b) \
    (((void *)&a >= (void *)MMU_SEC_HEAP) ? \
      (sizeof(a) == 1) ? mmu_set_uint8((uint8_t *)&a, b) : \
        (sizeof(a) == 2) ? mmu_set_uint16((uint16_t *)&a, b) : a = b : a = b)
#else
  #define getval(a) a
  #define setval(a, b) a = b
#endif

static struct rules_t **rules = NULL;
static uint8_t nrrules = 0;
static char out[OUTPUT_SIZE];

#ifndef ESP8266
struct serial_t Serial;
void *MMU_SEC_HEAP = NULL;
#endif

struct rule_options_t rule_options;

typedef struct array_t {
  const char *key;
  union {
    int i;
    float f;
    void *n;
    const char *s;
  } val;
  uint8_t type;
} array_t;

typedef struct varstack_t {
  struct array_t *array;
  uint16_t nr;
} varstack_t;

struct unittest_t {
  const char *rule;
  struct {
    const char *output;
    uint16_t bytes;
  } validate[3];
  struct {
    const char *output;
    uint16_t bytes;
  } run[3];
  int8_t dofail;
} unittests[] = {
  /*
   * Valid rules
   * Run the first rule twice to get
   * the final performance with the
   * jump table cached
   */
  { "if $a > $b then $a = 6; end", { { "[1]$a = 6", 40 } }, { { "", 40 } }, 0 },
  { "if $a > $b then $a = 6; end", { { "[1]$a = 6", 40 } }, { { "", 40 } }, 0 },
  { "if 1 + 2 / 3 - 4 == 5 then $a = 6; end", { { "[1]$a = 6", 60 } }, { { "", 60 } }, 0 },
  { "if 1 + 2 / 3 * 4 == 5 then $a = 6; end", { { "[1]$a = 6", 60 } }, { { "", 60 } }, 0 },
  { "if 1 / 2 + 3 * 4 == 5 then $a = 6; end", { { "[1]$a = 6", 64 } }, { { "", 64 } }, 0 },
  { "if 1 ^ 2 == 5 then $a = 6; end", { { "[1]$a = 6", 44 } }, { { "", 44 } }, 0 },
  { "if 1 + 2 ^ 3 == 5 then $a = 6; end", { { "[1]$a = 6", 52 } }, { { "", 52 } }, 0 },
  { "if 1 + 2 * 3 ^ 4 == 5 then $a = 6; end", { { "[1]$a = 6", 64 } }, { { "", 64 } }, 0 },
  { "if 1 + 2 * 3 ^ 4 ^ 5 == 5 then $a = 6; end", { { "[1]$a = 6", 68 } }, { { "", 68 } }, 0 },
  { "if 1 + 2 * 3 / 2 ^ 2 ^ 2 * 1 ^ 2 == 5 then $a = 6; end", { { "[1]$a = 6", 76 } }, { { "", 76 } }, 0 },
  { "if $z == $z then $z = $z; end", { { "[1]$z = NULL", 40 } }, { { "", 40 } }, 0 },
  { "if $z == $y then $z = $y; end", { { "[1]$z = NULL", 40 } }, { { "", 40 } }, 0 },
  { "if $z == $y then $z = $x; end", { { "[1]$z = NULL", 40 } }, { { "", 40 } }, 0 },
  { "if $z == $y then $z = $x; $z = $z; $y = $x; end", { { "[1]$z = NULL[1]$y = NULL", 60 } }, { { "", 60 } }, 0 },
  { "if $a == $b then $a = $c + $a / $b; end", { { "[1]$a = 3.5", 60 } }, { { "", 60 } }, 0 },
  { "if $a == $b then $a = $c + 1 / $b; end", { { "[1]$a = 3.5", 56 } }, { { "", 56 } }, 0 },
  { "if $a == $b then $a = $c + $a / 2; end", { { "[1]$a = 3.5", 56 } }, { { "", 56 } }, 0 },
  { "if $a == $b then $a = $c + $a / 2 * $c; end", { { "[1]$a = 4.5", 64 } }, { { "", 64 } }, 0 },
  { "if $a == $b then $a = $c / $a + 2 * $c; end", { { "[1]$a = 9", 72 } }, { { "", 72 } }, 0 },
  { "if $a == $b then $a = $c / $a + 2 * $c * $a; end", { { "[1]$a = 9", 80 } }, { { "", 80 } }, 0 },
  { "if $a == $b then $a = $c / $a + 2 ^ $c * $a; end", { { "[1]$a = 11", 80 } }, { { "", 80 } }, 0 },
  { "if $a == $b then $a = 1 + 2 * $b / $c ^ $b ^ $a * $c ^ 2; end", { { "[1]$a = 5", 96 } }, { { "", 96 } }, 0 },
  { "if $a == $b then $a = $a + 2 * $b / $c ^ $b ^ $a * $c ^ 2; end", { { "[1]$a = 5", 96 } }, { { "", 96 } }, 0 },
  { "if $a == $b then $a = $a + $b * $c / $c ^ $b ^ $a * $c ^ 2; end", { { "[1]$a = 7", 104 } }, { { "", 104 } }, 0 },
  { "if (3 == 3) then $a = 6; end", { { "[1]$a = 6", 32 } }, { { "[1]$a = 6", 32 } }, 0 },
  { "if (3 == 3 || 3 + 3 == 6) then $a = 6; end", { { "[1]$a = 6", 48 } }, { { "[1]$a = 6", 48 } }, 0 },
  { "if 1 == 1 then $a = 1; end", { { "[1]$a = 1", 28 } }, { { "[1]$a = 1", 28 } }, 0 },
  { "if 10 == 10 then $a = 10; end", { { "[1]$a = 10", 28 } }, { { "[1]$a = 10", 28 } }, 0 },
  { "if 100 == 100 then $a = 100; end", { { "[1]$a = 100", 28 } }, { { "[1]$a = 100", 28 } }, 0 },
  { "if 1000 == 1000 then $a = 1000; end", { { "[1]$a = 1000", 28 } }, { { "[1]$a = 1000", 28 } }, 0 },
  { "if 3.5 == 3.5 then $a = 3.5; end", { { "[1]$a = 3.5", 28 } }, { { "[1]$a = 3.5", 28 } }, 0 },
  { "if 33.5 == 33.5 then $a = 33.5; end", { { "[1]$a = 33.5", 28 } }, { { "[1]$a = 33.5", 28 } }, 0 },
  { "if 333.5 == 333.5 then $a = 333.5; end", { { "[1]$a = 333.5", 28 } }, { { "[1]$a = 333.5", 28 } }, 0 },
  { "if 99.3459 == 99.3459 then $a = 99.3459; end", { { "[1]$a = 99.3457", 28 } }, { { "[1]$a = 99.3457", 28 } }, 0 },
  { "if 3.335 < 33.35 then $a = 3.335; end", { { "[1]$a = 3.335", 32 } }, { { "[1]$a = 3.335", 32 } }, 0 },
  { "if 0.345673 == 0.345673 then $a = 0.345673; end", { { "[1]$a = 0.345673", 28 } }, { { "[1]$a = 0.345673", 28 } }, 0 },
  { "if -1 == -1 then $a = -1; end", { { "[1]$a = -1", 28 } }, { { "[1]$a = -1", 28 } }, 0 },
  { "if -10 == -10 then $a = -10; end", { { "[1]$a = -10", 28 } }, { { "[1]$a = -10", 28 } }, 0 },
  { "if -100 == -100 then $a = -100; end", { { "[1]$a = -100", 28 } }, { { "[1]$a = -100", 28 } }, 0 },
  { "if -1000 == -1000 then $a = -1000; end", { { "[1]$a = -1000", 28 } }, { { "[1]$a = -1000", 28 } }, 0 },
  { "if -10000 == -10000 then $a = -10000; end", { { "[1]$a = -10000", 28 } }, { { "[1]$a = -10000", 28 } }, 0 },
  { "if -100000 == -100000 then $a = -100000; end", { { "[1]$a = -100000", 28 } }, { { "[1]$a = -100000", 28 } }, 0 },
  { "if -999999 == -999999 then $a = -999999; end", { { "[1]$a = -999999", 28 } }, { { "[1]$a = -999999", 28 } }, 0 },
  { "if 3 == 3 then $a = 'foo'; end", { { "[1]$a = foo", 28 } }, { { "[1]$a = foo", 28 } }, 0 },
  { "if 3 == 3 then $a = 'foo bar'; end", { { "[1]$a = foo bar", 28 } }, { { "[1]$a = foo bar", 28 } }, 0 },
  { "if 3 == 3 then $a = 'foo\tbar'; end", { { "[1]$a = foo\tbar", 28 } }, { { "[1]$a = foo\tbar", 28 } }, 0 },
  { "if 3 == 3 then $a = 'foo\nbar'; end", { { "[1]$a = foo\nbar", 28 } }, { { "[1]$a = foo\nbar", 28 } }, 0 },
  { "if 3 == 3 then $a = 'foo bar'; $b = concat($a, ' ', 'foo'); end", { { "[1]$a = foo bar[1]$b = foo bar foo", 56 } }, { { "[1]$a = foo bar[1]$b = foo bar foo", 56 } }, 0 },
  { "if 3 == 3 then $a = 'foo bar'; $b = concat($a, ' ', 'foo'); $b = concat($a, ' ', $a); $c = concat($a, ' ', 'test'); end", { { "[1]$a = foo bar[1]$b = foo bar foo bar[1]$c = foo bar test", 132 } }, { { "[1]$a = foo bar[1]$b = foo bar foo bar[1]$c = foo bar test", 132 } }, 0 },
  { "if 1 == 1 then $a = 'foo	bar'; end", { { "[1]$a = foo	bar", 28 } }, { { "[1]$a = foo	bar", 28 } } }, // TAB
  { "if 1 == 1 then $a = \"foo	bar\"; end", { { "[1]$a = foo	bar", 28 } }, { { "[1]$a = foo	bar", 28 } } }, // TAB
  { "if 1 == 1 then $a = \"foo\\tbar\"; end", { { "[1]$a = foo	bar", 28 } }, { { "[1]$a = foo	bar", 28 } } }, // TAB
  { "if 1 == 1 then $a = \"foo\\\tbar\"; end", { { "[1]$a = foo\\\tbar", 28 } }, { { "[1]$a = foo\\\tbar", 28 } } },
  { "if 1 == 1 then $a = \"foo\n\
bar\"; end", { { "[1]$a = foo\n\
bar", 28 } }, { { "[1]$a = foo\n\
bar", 28 } } }, // Newline
  // Just the character sequence '\n'
  { "if 1 == 1 then $a = \"foo\\\\nbar\"; end", { { "[1]$a = foo\\nbar", 28 } }, { { "[1]$a = foo\\nbar", 28 } } },
  // Just the character sequence '\t'
  { "if 1 == 1 then $a = \"foo\\\\tbar\"; end", { { "[1]$a = foo\\tbar", 28 } }, { { "[1]$a = foo\\tbar", 28 } } },
  { "if 1 == 1 then $a = 'foo bar'; end", { { "[1]$a = foo bar", 28 } }, { { "[1]$a = foo bar", 28 } } },
  { "if 1 == 1 then $a = 'f\\\\'oo'; end", { { "[1]$a = f\\'oo", 28 } }, { { "[1]$a = f\\'oo", 28 } } },
  { "if 1 == 1 then $a = \"f\\\\\"oo\"; end", { { "[1]$a = f\\\"oo", 28 } }, { { "[1]$a = f\\\"oo", 28 } } },
  { "if 1 == 1 then $a = 'f\\'oo'; end", { { "[1]$a = f'oo", 28 } }, { { "[1]$a = f'oo", 28 } } },
  { "if 1 == 1 then $a = \"f\\\"oo\"; end", { { "[1]$a = f\"oo", 28 } }, { { "[1]$a = f\"oo", 28 } } },
  { "if 1 == 1 then $a = 'foo'; end", { { "[1]$a = foo", 28 } }, { { "[1]$a = foo", 28 } } },
  { "if 1 == 1 then $a = \"foo\"; end", { { "[1]$a = foo", 28 } }, { { "[1]$a = foo", 28 } } },
  { "if 3 == 3 then $a = 'foo'; $a = 1; end", { { "[1]$a = 1", 36 } }, { { "[1]$a = 1", 36 } }, 0 },
  { "if 3 == 3 then $a = 'foo'; $a = 1.2; end", { { "[1]$a = 1.2", 36 } }, { { "[1]$a = 1.2", 36 } }, 0 },
  { "if 3 == 3 then $a = 'foo'; $a = NULL; end", { { "[1]$a = NULL", 36 } }, { { "[1]$a = NULL", 36 } }, 0 },
  { "if 3 == 3 then $a = -1; $b = $a; end", { { "[1]$a = -1[1]$b = -1", 40 } }, { { "[1]$a = -1[1]$b = -1", 40 } }, 0 },
  { "if NULL == 3 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if NULL == 3 then $a = NULL; end", { { "[1]$a = NULL", 32 } }, { { "", 32 } }, 0 },
  { "if 1.1 == 1.1 then $a = 6; end", { { "[1]$a = 6", 32 } }, { { "[1]$a = 6", 32 } }, 0 },
  { "if 1.1 == 1.2 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if 4 != 3 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if (4 != 3) then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if NULL != 3 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if NULL != NULL then $a = 6; end", { { "[1]$a = 6", 32 } }, { { "", 32 } }, 0 },
  { "if 1.2 != 1.1 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 32 } }, 0 },
  { "if 1.2 != 1.2 then $a = 6; end", { { "[1]$a = 6", 32 } }, { { "", 36 } }, 0 },
  { "if 1 != 1 then $a = 6; end", { { "[1]$a = 6", 32 } }, { { "", 32 } }, 0 },
  { "if 1.1 >= 1.2 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if 1.1 >= 1.1 then $a = 6; end", { { "[1]$a = 6", 32 } }, { { "[1]$a = 6", 32 } }, 0 },
  { "if 2 >= 1.1 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if 2.1 >= 1 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if 9 <= -5 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if NULL >= 1.2 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if NULL >= NULL then $a = 6; end", { { "[1]$a = 6", 32 } }, { { "", 32 } }, 0 },
  { "if 1 > 2 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if 2 > 1 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if 2 > 1.1 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if 1.1 > 1.2 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if 1.1 > 1.0 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if NULL > 1.2 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if NULL > 1.2 && NULL < 5 then $a = 6; end", { { "[1]$a = 6", 52 } }, { { "", 52 } }, 0 },
  { "if NULL > NULL then $a = 6; end", { { "[1]$a = 6", 32 } }, { { "", 32 } }, 0 },
  { "if 1.2 <= 1.1 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if 1.1 <= 1.1 then $a = 6; end", { { "[1]$a = 6", 32 } }, { { "[1]$a = 6", 32 } }, 0 },
  { "if 1.1 <= 2 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if 1 <= 2 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if 2 <= 1 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if 1 <= 2.1 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if 1.2 <= NULL then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if NULL <= NULL then $a = 6; end", { { "[1]$a = 6", 32 } }, { { "", 32 } }, 0 },
  { "if 2 < 1 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if 1 < 2 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if 1.1 < 2 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if 1.2 < 1.1 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if 1.0 < 1.1 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if 1.2 < NULL then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if NULL < NULL then $a = 6; end", { { "[1]$a = 6", 32 } }, { { "", 32 } }, 0 },
  { "if NULL && NULL then $a = -6; end", { { "[1]$a = -6", 32 } }, { { "", 32 } }, 0 },
  { "if 0 && 0 then $a = -6; end", { { "[1]$a = -6", 32 } }, { { "", 32 } }, 0 },
  { "if 1 && 1 then $a = -6; end", { { "[1]$a = -6", 32 } }, { { "[1]$a = -6", 32 } }, 0 },
  { "if 1.1 && 1.2 then $a = -6; end", { { "[1]$a = -6", 36 } }, { { "[1]$a = -6", 36 } }, 0 },
  { "if 0.0 && 1.2 then $a = -6; end", { { "[1]$a = -6", 36 } }, { { "", 36 } }, 0 },
  { "if -1.1 && 1.2 then $a = -6; end", { { "[1]$a = -6", 36 } }, { { "", 36 } }, 0 },
  { "if 1.2 && 0.0 then $a = -6; end", { { "[1]$a = -6", 36 } }, { { "", 36 } }, 0 },
  { "if 1.2 && -1.1 then $a = -6; end", { { "[1]$a = -6", 36 } }, { { "", 36 } }, 0 },
  { "if NULL || NULL then $a = -6; end", { { "[1]$a = -6", 32 } }, { { "", 32 } }, 0 },
  { "if 0 || 0 then $a = -6; end", { { "[1]$a = -6", 32 } }, { { "", 32 } }, 0 },
  { "if 1 || 1 then $a = -6; end", { { "[1]$a = -6", 32 } }, { { "[1]$a = -6", 32 } }, 0 },
  { "if 1.1 || 1.2 then $a = -6; end", { { "[1]$a = -6", 36 } }, { { "[1]$a = -6", 36 } }, 0 },
  { "if -0.1 || -0.1 then $a = -6; end", { { "[1]$a = -6", 32 } }, { { "", 32 } }, 0 },
  { "if -0.5 || 1 then $a = -6; end", { { "[1]$a = -6", 36 } }, { { "[1]$a = -6", 36 } }, 0 },
  { "if 0.0 || 1.2 then $a = -6; end", { { "[1]$a = -6", 36 } }, { { "[1]$a = -6", 36 } }, 0 },
  { "if -1.1 || 1.2 then $a = -6; end", { { "[1]$a = -6", 36 } }, { { "[1]$a = -6", 36 } }, 0 },
  { "if 1.2 || 0.0 then $a = -6; end", { { "[1]$a = -6", 36 } }, { { "[1]$a = -6", 36 } }, 0 },
  { "if 1.2 || -1.1 then $a = -6; end", { { "[1]$a = -6", 36 } }, { { "[1]$a = -6", 36 } }, 0 },
  { "if 3 == NULL then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if (NULL == 3) then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if (3 == NULL) then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if @a == 3 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "", 36 } }, 0 },
  { "if foo#bar == 3 then $a = 6; end", { { "[1]$a = 6", 36 } }, { { "[1]$a = 6", 36 } }, 0 },
  { "if 3 == 3 then @a = 6; end", { { "[1]@a = 6", 32 } }, { { "[1]@a = 6", 32 } }, 0 },
  { "if 3 == 3 then $a = -6; end", { { "[1]$a = -6", 32 } }, { { "[1]$a = -6", 32 } }, 0 },
  { "if 4 != 3 then $a = -6; end", { { "[1]$a = -6", 36 } }, { { "[1]$a = -6", 36 } }, 0 },
  { "if 3 == 3 then $a = 1.1; end", { { "[1]$a = 1.1", 32 } }, { { "[1]$a = 1.1", 32 } }, 0 },
  { "if 3 == 3 then $a = 1 - NULL; end", { { "[1]$a = NULL", 40 } }, { { "[1]$a = NULL", 40 } }, 0 },
  { "if 3 == 3 then $a = 1 - 0.5 + 3; end", { { "[1]$a = 3.5", 44 } }, { { "[1]$a = 3.5", 44 } }, 0 },
  { "if 3 == 3 then $a = 0.5 - 0.5; end", { { "[1]$a = 0", 36 } }, { { "[1]$a = 0", 36 } }, 0 },
  { "if 3 == 3 then $a = 0.5 - 1; end", { { "[1]$a = -0.5", 40 } }, { { "[1]$a = -0.5", 40 } }, 0 },
  { "if 3 == 3 then $a = 1 + 2; end", { { "[1]$a = 3", 40 } }, { { "[1]$a = 3", 40 } }, 0 },
  { "if 3 == 3 then $a = 1.5 + 2.5; end", { { "[1]$a = 4", 40 } }, { { "[1]$a = 4", 40 } }, 0 },
  { "if 3 == 3 then $a = 1 * NULL; end", { { "[1]$a = NULL", 40 } }, { { "[1]$a = NULL", 40 } }, 0 },
  { "if 3 == 3 then $a = 1 ^ NULL; end", { { "[1]$a = NULL", 40 } }, { { "[1]$a = NULL", 40 } }, 0 },
  { "if 3 == 3 then $a = 9 % 2; end", { { "[1]$a = 1", 40 } }, { { "[1]$a = 1", 40 } }, 0 },
  { "if 3 == 3 then $a = 9 % NULL; end", { { "[1]$a = NULL", 40 } }, { { "[1]$a = NULL", 40 } }, 0 },
  { "if 3 == 3 then $a = 9.5 % 1.5; end", { { "[1]$a = 0.5", 40 } }, { { "[1]$a = 0.5", 40 } }, 0 },
  { "if 3 == 3 then $a = 10 % 1.5; end", { { "[1]$a = 1", 40 } }, { { "[1]$a = 1", 40 } }, 0 },
  { "if 3 == 3 then $a = 1.5 % 10; end", { { "[1]$a = 1.5", 40} }, { { "[1]$a = 1.5", 40 } }, 0 },
  { "if 1 == 1 then $a = 1 + 2 + 3; end", { { "[1]$a = 6", 44 } }, { { "[1]$a = 6", 44 } }, 0 },
  { "if 1 == 1 then $a = $a + 2 + 3; end", { { "[1]$a = 6", 48 } }, { { "[1]$a = 6", 48 } }, 0 },
  { "if 1 == 1 == 1 then $a = 1; end", { { "[1]$a = 1", 32 } }, { { "[1]$a = 1", 32 } }, 0 },
  { "if 1 == 1 == 2 then $a = 1; end", { { "[1]$a = 1", 36 } }, { { "", 36 } }, 0 },
  { "if 1 == 1 then $a = 1; $a = $a + 2; end", { { "[1]$a = 3", 44 } }, { { "[1]$a = 3", 44 } }, 0 },
  { "if 1 == 1 then $a = 6; $a = $a + 2 + $a / 3; end", { { "[1]$a = 10", 68 } }, { { "[1]$a = 10", 68 } }, 0 },
  { "if 1 == 1 then $a = 6; $a = ($a + 2 + $a / 3); end", { { "[1]$a = 10", 68 } }, { { "[1]$a = 10", 68 } }, 0 },
  { "if 1 == 1 then $a = NULL / 1; end", { { "[1]$a = NULL", 36 } }, { { "[1]$a = NULL", 36 } }, 0 },
  { "if 1 == 1 then $a = 2.5 / 7.5; end", { { "[1]$a = 0.333333", 40 } }, { { "[1]$a = 0.333333", 40 } }, 0 },
  { "if 1 == 1 then $a = 5 / 2.5; end", { { "[1]$a = 2", 40 } }, { { "[1]$a = 2", 40 } }, 0 },
  { "if 1 == 1 then $a = 2.5 / 5; end", { { "[1]$a = 0.5", 40 } }, { { "[1]$a = 0.5", 40 } }, 0 },
  { "if 1 == 1 then $a = 2.5 * 2.5; end", { { "[1]$a = 6.25", 36 } }, { { "[1]$a = 6.25", 36 } }, 0 },
  { "if 12 == 1 then $a = 1 + 2 * 3; end", { { "[1]$a = 7", 48 } }, { { "", 48 } }, 0 },
  { "if 1 == 1 then $a = (5) * (2); end", { "[1]$a = 10", 40 }, { "[1]$a = 10", 40 }, 0 },
  { "if 1 == 1 then $a = (5) * ($b * 2) + (1) * (1 + 2 * 3 / 2 ^ 2 ^ 2 * 1 ^ 2); end", { "[1]$a = 21.375", 96 }, { "[1]$a = 21.375", 96 }, 0 },
  { "if 1 == 1 then $a = (3 * 1) + (2 * 3); end", { { "[1]$a = 9", 52 } }, { { "[1]$a = 9", 52 } }, 0 },
  { "if 1 == 1 then $a = (3 * 1) + (2 * 3) + (1 * 3); end", { { "[1]$a = 12", 64 } }, { { "[1]$a = 12", 64 } }, 0 },
  { "if 1 == 1 then $a = ((3 * 1) + 2 * 3); end", { { "[1]$a = 9", 52 } }, { { "[1]$a = 9", 52 } }, 0 },
  { "if 1 == 1 then $a = 1 * 2 + 3; end", { { "[1]$a = 5", 44 } }, { { "[1]$a = 5", 44 } }, 0 },
  { "if 1 == 1 then $a = 1 * 100 ^ 2; end", { { "[1]$a = 10000", 44 } }, { { "[1]$a = 10000", 44 } }, 0 },
  { "if 1 == 1 then $a = 1 * 1.1 ^ 2; end", { { "[1]$a = 1.21", 44 } }, { { "[1]$a = 1.21", 44 } }, 0 },
  { "if 1 == 1 then $a = 1 * 1.1 ^ 1.1; end", { { "[1]$a = 1.11053", 40 } }, { { "[1]$a = 1.11053", 40 } }, 0 },
  { "if 1 == 1 then $a = 1 * 100 ^ 1.1; end", { { "[1]$a = 158.488", 44 } }, { { "[1]$a = 158.488", 44 } }, 0 },
  { "if 1 == 1 then $a = 1 + 2 * 3 / 4; end", { { "[1]$a = 2.5", 52 } }, { { "[1]$a = 2.5", 52 } }, 0 },
  { "if 1 == 1 then $a = 1 + 2 * 3 / 4 ^ 2; end", { { "[1]$a = 1.375", 60 } }, { { "[1]$a = 1.375", 60 } }, 0 },
  { "if 1 == 1 then $a = 1 + 4 ^ 2 ^ 1; end", { { "[1]$a = 17", 48 } }, { { "[1]$a = 17", 48 } }, 0 },
  { "if 1 == 1 then $a = (1 + 4 ^ 2 ^ 1); end", { { "[1]$a = 17", 48 } }, { { "[1]$a = 17", 48 } }, 0 },
  { "if 1 == 1 then $a = (1 + 2 * 3 / 4 ^ 2); end", { "[1]$a = 1.375", 60 }, { "[1]$a = 1.375", 60 }, 0 },
  { "if 1 == 1 then $a = (1 + 2 * 3 / 4 ^ 2 ^ 1 * 3); end", { "[1]$a = 2.125", 68 }, { "[1]$a = 2.125", 68 }, 0 },
  { "if 1 == 1 then $a = (1 + 2 * 3 / 4 ^ 2 ^ 1 * 3 ^ 4); end", { "[1]$a = 31.375", 72 }, { "[1]$a = 31.375", 72 }, 0 },
  { "if 1 == 1 then $a = 1 + 2 * 3 / 4 ^ 2 ^ 1 * 3 ^ 4; end", { "[1]$a = 31.375", 72 }, { "[1]$a = 31.375", 72 }, 0 },
  { "if 1 == 1 then $a = (1 + 2) * 3; end", { "[1]$a = 9", 44 }, { "[1]$a = 9", 44 }, 0 },
  { "if 1 == 1 then $a = (1 + 2 + 3) * 3; end", { "[1]$a = 18", 48 }, { "[1]$a = 18", 48 }, 0 },
  { "if 1 == 1 then $a = (1 + 2 * 3) * 3; end", { "[1]$a = 21", 48 }, { "[1]$a = 21", 48 }, 0 },
  { "if 1 == 1 then $a = (1 * 2 + 3) * 3; end", { "[1]$a = 15", 48 }, { "[1]$a = 15", 48 }, 0 },
  { "if 1 == 1 then $a = 1 + 2 * 3 * 3; end", { "[1]$a = 19", 48 }, { "[1]$a = 19", 48 }, 0 },
  { "if 1 == 1 then $a = (1 + 2 * 3); end", { "[1]$a = 7", 44 }, { "[1]$a = 7", 44 }, 0 },
  { "if 1 == 1 then $a = 3 * (1 + 2); end", { "[1]$a = 9", 44 }, { "[1]$a = 9", 44 }, 0 },
  { "if 1 == 1 then $a = 3 + (1 * 2); end", { "[1]$a = 5", 44 }, { "[1]$a = 5", 44 }, 0 },
  { "if 1 == 1 then $a = 3 * (1 + 2) * 2; end", { "[1]$a = 18", 48 }, { "[1]$a = 18", 48 }, 0 },
  { "if 1 == 1 then $a = 3 * (1 + 3) ^ 2; end", { "[1]$a = 48", 48 }, { "[1]$a = 48", 48 }, 0 },
  { "if 1 == 1 then $a = 1 + 2 * 3 / (4 - 5 + 6) ^ 2 ^ 2; end", { "[1]$a = 1.0096", 80 }, { "[1]$a = 1.0096", 80 }, 0 },
  { "if 1 == 1 then $a = 3 * (1 + 2) + 2; end", { "[1]$a = 11", 48 }, { "[1]$a = 11", 48 }, 0 },
  { "if 1 == 1 then $a = 3 + (1 + 2) * 2; end", { "[1]$a = 9", 48 }, { "[1]$a = 9", 48 }, 0 },
  { "if 1 == 1 then $a = 3 * (1 + 2 / 2) + 3; end", { "[1]$a = 9", 52 }, { "[1]$a = 9", 52 }, 0 },
  { "if 1 == 1 then $a = 3 * ((1 + 2) / 2) - 2; end", { "[1]$a = 2.5", 52 }, { "[1]$a = 2.5", 52 }, 0 },
  { "if 1 == 1 then $a = 3 * ((1 + 2) / 2 + 3); end", { "[1]$a = 13.5", 52 }, { "[1]$a = 13.5", 52 }, 0 },
  { "if 1 == 1 then $a = 3 * ((1 + 2) / (2 + 3)); end", { "[1]$a = 1.8", 56 }, { "[1]$a = 1.8", 56 }, 0 },
  { "if 1 == 1 then $a = 3 * ((((1 + 2) / (2 + 3)))); end", { "[1]$a = 1.8", 56 }, { "[1]$a = 1.8", 56 }, 0 },
  { "if $a == $a then $a = $a * (((($a + $a) / ($a + $a)))); end", { "[1]$a = 1", 80 }, { "[1]$a = 1", 80 }, 0 },
  { "if 1 == 1 then $a = 3 * ((1 + 2) / (2 + 3)) + 2; end", { "[1]$a = 3.8", 60 }, { "[1]$a = 3.8", 60 }, 0 },
  { "if 1 == 1 then $a = 1 * ((2 + 3 + 4) / (4 + 5 + 6)) + (6 + 7); end", { "[1]$a = 13.6", 88 }, { "[1]$a = 13.6", 88 }, 0 },
  { "if 1 == 1 then $a = 1 + ((2 + 3) / (4 + 5)) * (6 + 7); end", { "[1]$a = 8.22223", 80 }, { "[1]$a = 8.22223", 80 }, 0 },
  { "if 1 == 1 then $a = 1 + ((2 + 3) / (4 + 5)) * ((6 + 7) + (4 + 5) / ((2 * 3) + 4)); end", { "[1]$a = 8.72223", 104 }, { "[1]$a = 8.72223", 104 }, 0 },
  { "if 1 == 1 then $a = 1 == 1 && 1 == 0 || 5 >= 4; end", { "[1]$a = 1", 64 }, { "[1]$a = 1", 64 }, 0 },
  { "if 1 == 1 then $a = (1 == 1 && 1 == 0) || 5 >= 4; end", { "[1]$a = 1", 64 }, { "[1]$a = 1", 64 }, 0 },
  { "if 1 == 1 then $a = (1 == 1 && 1 == 0) || 3 >= 4; end", { "[1]$a = 0", 64 }, { "[1]$a = 0", 64 }, 0 },
  { "if 1 == 1 then $a = 3; end", { "[1]$a = 3", 32 }, { "[1]$a = 3", 32 }, 0 },
  { "if 1 == 1 then $a = 3.1; $b = $a; end", { "[1]$a = 3.1[1]$b = 3.1", 40 }, { "[1]$a = 3.1[1]$b = 3.1", 40 }, 0 },
  { "if 1 == 1 then $a = $a + 1; end", { "[1]$a = 2", 36 }, { "[1]$a = 2", 36 }, 0 },
  { "if 1 == 1 then $a = 1; print($a); end", { "[1]$a = 1", 44 }, { "[1]$a = 1", 44 }, 0 },
  { "if 1 == 1 then $a = 1; $b = 1.2; print($a, '-', $b, '-', $c); end", { "[1]$a = 1[1]$b = 1.2", 84 }, { "[1]$a = 1[1]$b = 1.2", 84 }, 0 },
  { "if 1 == 1 then $a = 1; max($a); end", { "[1]$a = 1", 44 }, { "[1]$a = 1", 44 }, 0 },
  { "if 1 == 1 then $a = max(foo#bar); end", { "[1]$a = 3", 40 }, { "[1]$a = 3", 40 }, 0 },
  { "if 1 == 1 then $a = max(foo#bar, 4); end", { "[1]$a = 4", 52 }, { "[1]$a = 4", 52 }, 0 },
  { "if 1 == 1 then $a = max(foo#bar, 4); end", { "[1]$a = 4", 52 }, { "[1]$a = 4", 52 }, 0 },
  { "if 1 == 1 then $a = max(foo#bar, 4, 5.5); end", { "[1]$a = 5.5", 60 }, { "[1]$a = 5.5", 60 }, 0 },
  { "if 1 == 1 then $a = min(foo#bar, 4, 1.5); end", { "[1]$a = 1.5", 60 }, { "[1]$a = 1.5", 60 }, 0 },
  { "if 1 == 1 then $a = max(NULL, 3 * 2); end", { "[1]$a = 6", 56 }, { "[1]$a = 6", 56 }, 0 },
  { "if 1 == 1 then $a = max(NULL, $b * 2); end", { "[1]$a = 4", 56 }, { "[1]$a = 4", 64 }, 0 },
  { "if 1 == 1 then $a = 5 * max(NULL, $b * 2); end", { "[1]$a = 20", 64 }, { "[1]$a = 20", 56 }, 0 },
  { "if 1 == 1 then $a = 5 + max(NULL, $b * 2) * 2; end", { "[1]$a = 13", 68 }, { "[1]$a = 13", 68 }, 0 },
  { "if 1 == 1 then $a = 5 * max(1 * 2, $b * 2); end", { "[1]$a = 20", 68 }, { "[1]$a = 20", 68 }, 0 },
  { "if 1 == 1 then $a = max(5) * max(NULL, $b * 2); end", { "[1]$a = 20", 76 }, { "[1]$a = 20", 76 }, 0 },
  { "if 1 == 1 then $a = (5) * ($b * 2) + (1) * (1 + 2 * 3 / 2 ^ 2 ^ 2 * 1 ^ 2); end", { "[1]$a = 21.375", 96 }, { "[1]$a = 21.375", 96 }, 0 },
  { "if 1 == 1 then $a = max(5) * max(NULL, $b * 2) + max(1) * max(0, 1 + 2 * 3 / 2 ^ 2 ^ 2 * 1 ^ 2); end", { "[1]$a = 21.375", 152 }, { "[1]$a = 21.375", 152 }, 0 },
  { "if 1 == 1 then $a = coalesce(NULL, 1) + 1; end", { "[1]$a = 2", 48 }, { "[1]$a = 2", 48 }, 0 },
  { "if 1 == 1 then $a = coalesce(NULL, 1.2) + 1; end", { "[1]$a = 2.2", 52 }, { "[1]$a = 2.2", 52 }, 0 },
  { "if 1 == 1 then $a = coalesce(NULL, 'a'); end", { "[1]$a = a", 44 }, { "[1]$a = a", 44 }, 0 },
  { "if 1 == 1 then $a = coalesce(1, 0) + 1; end", { "[1]$a = 2", 52 }, { "[1]$a = 2", 52 }, 0 },
  { "if 1 == 1 then $a = coalesce($a, 0) + 1; end", { "[1]$a = 2", 56 }, { "[1]$a = 2", 56 }, 0 },
  { "if 1 == 1 then $a = coalesce($a, 1.1) + 1; end", { "[1]$a = 2", 56 }, { "[1]$a = 2", 56 }, 0 },
  { "if 3 == 3 then $a = max(1); end", { "[1]$a = 1", 44 }, { "[1]$a = 1", 44 }, 0 },
  { "if 3 == 3 then $a = max(NULL, 1); end", { "[1]$a = 1", 48 }, { "[1]$a = 1", 48 }, 0 },
  { "if 3 == 3 then $a = max(1, NULL); end", { "[1]$a = 1", 48 }, { "[1]$a = 1", 48 }, 0 },
  { "if 3 == 3 then $b = 2; $a = max($b, 1); end", { "[1]$b = 2[1]$a = 2", 60 }, { "[1]$b = 2[1]$a = 2", 60 }, 0 },
  { "if 3 == 3 then $a = max(1, 2); end", { "[1]$a = 2", 52 }, { "[1]$a = 2", 52 }, 0 },
  { "if 3 == 3 then $a = max(1, 2, 3, 4); end", { "[1]$a = 4", 64 }, { "[1]$a = 4", 64 }, 0 },
  { "if 3 == 3 then $a = max(1, 4, 5, 3, 2); end", { "[1]$a = 5", 72 }, { "[1]$a = 5", 72 }, 0 },
  { "if 3 == 3 then $a = max(max(1, 4), 2); end", { "[1]$a = 4", 72 }, { "[1]$a = 4", 72 }, 0 },
  { "if 3 == 3 then max(max(1, 4), 2); end", { "", 72 }, { "", 72 }, 0 },
  { "if 3 == 3 then max(2); min(2); end", { "", 56 }, { "", 56 }, 0 },
  { "if 3 == 3 then max(2); min(2); max(3); end", { "", 72 }, { "", 72 }, 0 },
  { "if 3 == 3 then max($a, 4, 2); $b = max(1, 3); end", { "[1]$b = 3", 84 }, { "[1]$b = 3", 84 }, 0 },
  { "if 3 == 3 then $a = max(1, 2) * 3; end", { "[1]$a = 6", 56 }, { "[1]$a = 6", 56 }, 0 },
  { "if 3 == 3 then $a = max(1, 2) * max(3, 4); end", { "[1]$a = 8", 76 }, { "[1]$a = 8", 76 }, 0 },
  { "if 3 == 3 then $a = max(max(1, 2), (1 * max(1, 3) ^ 2)); end", { "[1]$a = 9", 88 }, { "[1]$a = 9", 88 }, 0 },
  { "if 3 == 3 then $b = 1; $a = max($b + 1); end", { "[1]$b = 1[1]$a = 2", 52 }, { "[1]$b = 1[1]$a = 2", 52 }, 0 },
  { "if 3 == 3 then $b = 1; $a = max($b + 1) * 3; end", { "[1]$b = 1[1]$a = 6", 56 }, { "[1]$b = 1[1]$a = 6", 56 }, 0 },
  { "if NULL then $a = 1; end", { "[1]$a = 1", 28 }, { "", 28 }, 0 },
  { "if 0 then $a = 1; end", { "[1]$a = 1", 28 }, { "", 28 }, 0 },
  { "if 1 then $a = 1; end", { "[1]$a = 1", 24 }, { "[1]$a = 1", 24 }, 0 },
  { "if -1 then $a = 1; end", { "[1]$a = 1", 28 }, { "", 28 }, 0 },
  { "if 1.6 then $a = 1; end", { "[1]$a = 1", 28 }, { "[1]$a = 1", 28 }, 0 },
  { "if max(0) then $a = 1; end", { "[1]$a = 1", 40 }, { "", 40 }, 0 },
  { "if max(1) then $a = 1; end", { "[1]$a = 1", 36 }, { "[1]$a = 1", 36 }, 0 },
  { "if $a then $a = 1; end", { "[1]$a = 1", 32 }, { "[1]$a = 1", 32 }, 0 },
  { "if $d then $a = 1; end", { "[1]$a = 1", 32 }, { "", 32 }, 0 },
  { "if $a then if 1 then $a = 1; end end", { "[1]$a = 1", 40 }, { "[1]$a = 1", 40 }, 0 },
  { "if $a then if 0 then $a = 1; end end", { "[1]$a = 1", 44 }, { "", 44 }, 0 },
  { "if $a then if 1 == 0 then $a = 1; elseif 1 then $a = 2; end end", { "[1]$a = 2", 64 }, { "[1]$a = 2", 64 }, 0 },
  { "if (1 <= 5) then $a = 1; end", { "[1]$a = 1", 32 }, { "[1]$a = 1", 32 }, 0 },
  { "if max(1) == 1 && max(1) then $a = 1; end", { "[1]$a = 1", 52 }, { "[1]$a = 1", 52 }, 0 },
  { "if max(1) && max(1) then $a = 1; end", { "[1]$a = 1", 48 }, { "[1]$a = 1", 48 }, 0 },
  { "if max(1, 3) == 3 then $a = 1; end", { "[1]$a = 1", 44 }, { "[1]$a = 1", 44 }, 0 },
  { "if max(1, 3) == max(1, 3) then $a = 1; end", { "[1]$a = 1", 60 }, { "[1]$a = 1", 60 }, 0 },
  { "if max(1, 12000) == max(1, 3) then $a = 1; end", { "[1]$a = 1", 64 }, { "", 64 }, 0 },
  { "if max(1, 12222.5555) == max(1, 3) then $a = 1; end", { "[1]$a = 1", 64 }, { "", 64 }, 0 },
  { "if 3 == 3 then max(1, 2); end", { "", 48 }, { "", 48 }, 0 },
  { "if 3 == 3 then if 1 == 1 then $a = 1; end max(1, 2); end", { "[1]$a = 1", 60 }, { "[1]$a = 1", 60 }, 0 },
  { "if 3 == 3 then max(1, 2); $b = 3; end", { "[1]$b = 3", 52 }, { "[1]$b = 3", 52 }, 0 },
  { "if 3 == 3 then $a = 1; $b = $a; max(1, 2); end", { "[1]$a = 1[1]$b = 1", 64 }, { "[1]$a = 1[1]$b = 1", 64 }, 0 },
  { "if 3 == 3 then $a = max(1 + 1, 2 + 2); end", { "[1]$a = 4", 60 }, { "[1]$a = 4", 60 }, 0 },
  { "if 1 == 1 then $a = coalesce($b, 0); end  ", { { "[1]$a = 2", 52 } }, { { "[1]$a = 2", 52 } }, 0 },
  { "if 1 == 1 then $a = round(3.5); end  ", { { "[1]$a = 3", 44 } }, { { "[1]$a = 3", 44 } }, 0 },
  { "if 1 == 1 then $a = round(3.519231983, 2); end  ", { { "[1]$a = 3.52", 52 } }, { { "[1]$a = 3.52", 52 } }, 0 },
  { "if 1 == 1 then $a = round(5); end  ", { { "[1]$a = 5", 44 } }, { { "[1]$a = 5", 44 } }, 0 },
  { "if 1 == 1 then $a = round(-5); end  ", { { "[1]$a = -5", 44 } }, { { "[1]$a = -5", 44 } }, 0 },
  { "if 1 == 1 then $a = round(-3.5); end  ", { { "[1]$a = -3", 44 } }, { { "[1]$a = -3", 44 } }, 0 },
  { "if 1 == 1 then $a = round(-3.519231983, 4); end  ", { { "[1]$a = -3.5192", 52 } }, { { "[1]$a = -3.5192", 52 } }, 0 },
  { "if 1 == 1 then $a = round(NULL, 4); end  ", { { "[1]$a = NULL", 48 } }, { { "[1]$a = NULL", 48 } }, 0 },
  { "if 1 == 1 then $a = round(NULL); end  ", { { "[1]$a = NULL", 40 } }, { { "[1]$a = NULL", 40 } }, 0 },
  { "if 1 == 1 then $a = ceil(3.5); end  ", { { "[1]$a = 4", 44 } }, { { "[1]$a = 4", 44 } }, 0 },
  { "if 1 == 1 then $a = ceil(5); end  ", { { "[1]$a = 5", 44 } }, { { "[1]$a = 5", 44 } }, 0 },
  { "if 1 == 1 then $a = ceil(-5); end  ", { { "[1]$a = -5", 44 } }, { { "[1]$a = -5", 44 } }, 0 },
  { "if 1 == 1 then $a = ceil(-3.5); end  ", { { "[1]$a = -3", 44 } }, { { "[1]$a = -3", 44 } }, 0 },
  { "if 1 == 1 then $a = ceil(NULL); end  ", { { "[1]$a = NULL", 40 } }, { { "[1]$a = NULL", 40 } }, 0 },
  { "if 1 == 1 then $a = floor(3.5); end  ", { { "[1]$a = 3", 44 } }, { { "[1]$a = 3", 44 } }, 0 },
  { "if 1 == 1 then $a = floor(5); end  ", { { "[1]$a = 5", 44 } }, { { "[1]$a = 5", 44 } }, 0 },
  { "if 1 == 1 then $a = floor(-5); end  ", { { "[1]$a = -5", 44 } }, { { "[1]$a = -5", 44 } }, 0 },
  { "if 1 == 1 then $a = floor(-3.5); end  ", { { "[1]$a = -4", 44 } }, { { "[1]$a = -4", 44 } }, 0 },
  { "if 1 == 1 then $a = floor(NULL); end  ", { { "[1]$a = NULL", 40 } }, { { "[1]$a = NULL", 40 } }, 0 },
  { "if 3 == 3 then $a = max((1 + 3), 2); end", { "[1]$a = 4", 56 }, { "[1]$a = 4", 56 }, 0 },
  { "if 3 == 3 then $a = max((1 + (3 * 3)), 2); end", { "[1]$a = 10", 60 }, { "[1]$a = 10", 60 }, 0 },
  { "if 3 == 3 then $a = max(1 + 3 * 3, 3 * 4); end", { "[1]$a = 12", 64 }, { "[1]$a = 12", 64 }, 0 },
  { "if 3 == 3 then $a = max(((2 + 3) * 3), (3 * 4)); end", { "[1]$a = 15", 64 }, { "[1]$a = 15", 64 }, 0 },
  { "if 3 == 3 then $a = (max(1, 2) + 2) * 3; end", { "[1]$a = 12", 60 }, { "[1]$a = 12", 60 }, 0 },
  { "if 1 == 1 then $a = max(0, 1) + max(1, 2) * max(2, 3) / max(3, 4) ^ max(1, 2) ^ max(0, 1) * max(2, 3) ^ max(3, 4); end", { "[1]$a = 31.375", 200 }, { "[1]$a = 31.375", 200 }, 0 },
  { "if 3 == 3 then $a = 2; $b = max((($a + 3) * 3), (3 * 4)); end", { "[1]$a = 2[1]$b = 15", 72 }, { "[1]$a = 2[1]$b = 15", 72 }, 0 },
  { "if 3 == 3 then $a = 2; $b = max((max($a + 3) * 3), (3 * 4)); end", { "[1]$a = 2[1]$b = 15", 80 }, { "[1]$a = 2[1]$b = 15", 80 }, 0 },
  { "if 1 == 1 then $a = max(1 * 2, (min(5, 6) + 1) * 6); end", { { "[1]$a = 36", 84 } }, { { "[1]$a = 36", 84 } }, 0 },
  { "if 1 == 2 || 3 >= 4 then $a = max(1, 2); end", { "[1]$a = 2", 64 }, { "", 68 }, 0 },
  { "if 1 == 2 || 3 >= 4 then $a = min(3, 1, 2); end", { "[1]$a = 1", 68 }, { "", 68 }, 0 },
  { "if 1 == 1 then $a = 1; $a = NULL; end", { "[1]$a = NULL", 36 }, { "[1]$a = NULL", 36 }, 0 },
  { "if 1 == 2 then $a = 3; else $a = 4; end", { "[1]$a = 4", 48 }, { "[1]$a = 4", 48 }, 0 },
  { "if 1 == 1 then $a = 3; else $a = 4; end", { "[1]$a = 4", 44 }, { "[1]$a = 3", 44 }, 0 },
  { "if 1 == 1 then $a = 1; if $a == NULL then $a = 0; end $a = $a + 1; end", { "[1]$a = 1", 64 }, { "[1]$a = 2", 64 }, 0 },
  { "if 1 == 1 then $a = 1; if $a == NULL then $a = 0; end $a = $a + 1; end", { "[1]$a = 1", 64 }, { "[1]$a = 2", 64 }, 0 },
  { "if 1 == 1 then $a = 1; if $a == 1 then $a = NULL; end end", { "[1]$a = NULL", 48 }, { "[1]$a = NULL", 48 }, 0 },
  { "if 1 == 1 then if $a == NULL then $a = 0; end $a = $a + 1; end", { "[1]$a = 1", 60 }, { "[1]$a = 2", 60 }, 0 },
  { "if (1 + 1) == 1 then $a = 3; else $a = 4; end", { "[1]$a = 4", 48 }, { "[1]$a = 4", 48 }, 0 },
  { "if 1 == 2 || 3 >= 4 then $a = 1; end", { "[1]$a = 1", 52 }, { "", 52 }, 0 },
  { "if 1 == 2 || 3 >= 4 || 5 == 6 then $a = 1; end", { "[1]$a = 1", 68 }, { "", 68 }, 0 },
  { "if 1 == 2 || 3 >= 4 || 5 == 6 then $a = max(1, 3, 2); else $b = 9; end", { "[1]$a = 3[1]$b = 9", 96 }, { "[1]$b = 9", 96 }, 0 },
  { "if 1 == 1 then $a = 1; $b = 2; end", { "[1]$a = 1[1]$b = 2", 36 }, { "[1]$a = 1[1]$b = 2", 36 }, 0 },
  { "if 1 == 1 then $a = 1; $b = ($a + 3) * 3; end", { "[1]$a = 1[1]$b = 12", 48 }, { "[1]$a = 1[1]$b = 12", 48 }, 0 },
  { "if 1 == 1 then $a = 1; $b = $a + 3 * 3; end", { "[1]$a = 1[1]$b = 10", 52 }, { "[1]$a = 1[1]$b = 10", 52 }, 0 },
  { "if 1 == 1 then if 5 == 6 then $a = 1; end $a = 2; end", { "[1]$a = 2", 52 }, { "[1]$a = 2", 52 }, 0 },
  { "if 1 == 1 then if 5 == 6 then $a = 1; end if 1 == 3 then $b = 3; end $a = 2; end", { "[1]$a = 2[1]$b = 3", 68 }, { "[1]$a = 2", 68 }, 0 },
  { "if 1 == 1 then $a = 1; $b = $a; end", { "[1]$a = 1[1]$b = 1", 36 }, { "[1]$a = 1[1]$b = 1", 36 }, 0 },
  { "if 1 == 1 then $a = 1; if 5 >= 4 then $a = 3; end $b = $a; end", { "[1]$a = 3[1]$b = 3", 60 }, { "[1]$a = 3[1]$b = 3", 60 }, 0 },
  { "if 1 == 1 then $a = 1; if $a == 1 then $a = 3; end end", { "[1]$a = 3", 48 }, { "[1]$a = 3", 48 }, 0 },
  { "if (1 == 1 && 1 == 0) || 5 >= 4 then $a = 1; end", { "[1]$a = 1", 60 }, { "[1]$a = 1", 60 }, 0 },
  { "if 3 == 3 then $a = 1; elseif (4 + 4) < 1 then $a = 2; end", { "[1]$a = 2", 60 }, { "[1]$a = 1", 60 }, 0 },
  { "if 1 == 1 then $a = 1; else $a = 2; end", { "[1]$a = 2", 40 }, { "[1]$a = 1", 40 }, 0 },
  { "if 1 == 2 then $a = 1; elseif 2 == 2 then $a = 3; else $a = 2; end", { "[1]$a = 2", 60 }, { "[1]$a = 3", 60 }, 0 },
  { "if 1 == 2 then $a = 1; elseif 2 == 2 then $a = 2; end", { "[1]$a = 2", 48 }, { "[1]$a = 2", 48 }, 0 },
  { "if 1 == 2 then $a = 1; elseif 3 == 2 then $a = 2; elseif 4 == 4 then $a = 4; end", { "[1]$a = 4", 72 }, { "[1]$a = 4", 72 }, 0 },
  { "if 1 == 2 then $a = 1; elseif 3 == 2 then if 1 > 4 then $a = 2; else $a = 1; end end", { "[1]$a = 1", 72 }, { "", 72 }, 0 },
  { "if 1 == 2 then $a = 1; elseif 2 == 2 then $b = 1; elseif 3 > 2 then $c = 1; end", { "[1]$a = 1[1]$b = 1[1]$c = 1", 68 }, { "[1]$b = 1", 68 }, 0 },
  { "if 1 == 2 then $a = 1; if 2 < 3 then $a = 5; end elseif 3 == 2 then if 1 > 4 then $a = 2; else $a = 1; end end", { "[1]$a = 1", 88 }, { "", 88 }, 0 },
  { "if 1 == 1 then if 2 == 2 then $a = 1; end else $a = 2; end", { "[1]$a = 2", 48 }, { "[1]$a = 1", 48 }, 0 },
  { "if (1 == 1) || 5 >= 4 then $a = 1; if 6 == 5 then $a = 2; end $a = $a + 3; $b = (3 + $a) * 2; else $a = 7; end", { "[1]$a = 7[1]$b = 16", 112 }, { "[1]$a = 4[1]$b = 14", 112 }, 0 },
  { "if (1 == 1) || 5 >= 4 then $a = 1; if 6 == 5 then $a = 2; end $a = $a + 3; $b = (3 + $a) * 2; $b = 3; else $a = 7; end", { "[1]$a = 7[1]$b = 3", 116 }, { "[1]$a = 4[1]$b = 3", 116 }, 0 },
  { "if (1 == 1 && 1 == 0) || 5 >= 4 then $a = 1; if 6 == 5 then $a = 2; end $a = $a + 3; $b = (3 + $a * 5 + 3 * 1) * 2; @c = 5; else if 2 == 2 then $a = 6; else $a = 7; end end", { "[1]$a = 7[1]$b = 62[1]@c = 5", 160 }, { "[1]$a = 4[1]$b = 52[1]@c = 5", 160 }, 0 },
  { "if 3 == 3 then $a = 6; end if 3 == 3 then $b = 3; end  ", { { "[1]$a = 6", 32 }, { "[2]$b = 3", 28 } }, { { "[1]$a = 6", 28 }, { "[2]$b = 3", 28 } }, 0 },
  { "   if 3 == 3 then $a = 6; end    if 3 == 3 then $b = 6; end               if 3 == 3 then $c = 6; end", { { "[1]$a = 6", 32 }, { "[2]$b = 6", 32 }, { "[3]$c = 6", 32 } }, { { "[1]$a = 6", 32 }, { "[2]$b = 6", 32 }, { "[3]$c = 6", 32 } }, 0 },
  { "if 3 == 3 then $a = 6; end if 3 == 3 then $b = 3; end  ", { { "[1]$a = 6", 32 }, { "[2]$b = 3", 28 } }, { { "[1]$a = 6", 32 }, { "[2]$b = 3", 32 } }, 0 },
  { "on foo then $a = 6; end", { "[1]$a = 6", 16 }, { "[1]$a = 6", 16 }, 0 },
  { "if 3 == 3 then foo(1, 2); $b = 3; end  ", { "[1]$b = 3", 52 }, { "[1]$b = 3", 52 }, 0 },
  { "on foo($a, $b) then $a = $b; end if 3 == 3 then foo(1, 5); $b = 3; end  ", { { "[1]$a = NULL[1]$b = NULL", 28 }, { "[1]$a = 5[1]$b = 5[2]$b = 3", 52 } }, { { "[1]$a = NULL[1]$b = NULL", 28 }, { "[1]$a = 5[1]$b = 5[2]$b = 3", 28 } }, 0 },
  { "on foo($a, $b) then $a = $b; end if 3 == 3 then foo(1, 'foo'); $b = 3; end  ", { { "[1]$a = NULL[1]$b = NULL", 28 }, { "[1]$a = foo[1]$b = foo[2]$b = 3", 48 } }, { { "[1]$a = NULL[1]$b = NULL", 28 }, { "[1]$a = foo[1]$b = foo[2]$b = 3", 28 } }, 0 },
  { "on foo($a, $b) then $a = $b; end if 3 == 3 then foo(1, 5, 6); $b = max(1, 3); end  ", { { "[1]$a = NULL[1]$b = NULL", 28 }, { "[1]$a = 5[1]$b = 5[2]$b = 3", 76 } }, { { "[1]$a = NULL[1]$b = NULL", 28 }, { "[1]$a = 5[1]$b = 5[2]$b = 3", 28 } }, 0 },
  { "on foo($a, $b) then $a = $b; end if 3 == 3 then foo(1); $b = 3; end  ", { { "[1]$a = NULL[1]$b = NULL", 28 }, { "[1]$a = NULL[1]$b = NULL[2]$b = 3", 44 } }, { { "[1]$a = NULL[1]$b = NULL", 28 }, { "[1]$a = NULL[1]$b = NULL[2]$b = 3", 28 } }, 0 },
  { "on foo($a, $c) then $a = $c; end if 3 == 3 then foo(NULL, 1); $b = 3; end  ", { { "[1]$a = NULL[1]$c = NULL", 28 }, { "[1]$a = 1[1]$c = 1[2]$b = 3", 52 } }, { { "[1]$a = NULL[1]$c = NULL", 28 }, { "[1]$a = 1[1]$c = 1[2]$b = 3", 28 } }, 0 },
  { "on foo then max(1, 2); end", { "", 36 }, { "", 36 }, 0 },
  { "on foo then max(1, 2); end if 3 == 3 then max(1); foo(1); end", { { "", 36 }, { "", 56 } }, { { "", 16 }, { "", 56 } }, 0 },
  { "on foo then max(1, 2); end if 3 == 3 then if 1 == 1 then $a = 1; end foo(1); end", { { "", 36 }, { "[2]$a = 1", 52 } }, { { "", 16 }, { "[2]$a = 1", 52 } }, 0 },
  { "on foo then $a = 6; $b = 3; end", { "[1]$a = 6[1]$b = 3", 24 }, { "[1]$a = 6[1]$b = 3", 24 }, 0 },
  { "on foo then $a = 1 + 2; end", { { "[1]$a = 3", 28 } }, { { "[1]$a = 3", 32 } }, 0 },
  { "on foo then if $a == 1 then max(2, 900); end end", { "", 52 }, { "", 52 }, 0 },
  { "on foo then if 1 < 2 then $b = 1; end if (1 + 0) <= 2 then $a = 1; end end", { "[1]$b = 1[1]$a = 1", 52 }, { "[1]$b = 1[1]$a = 1", 52 }, 0 },
  { "if 1 == 1 then if 5 == 6 then $a = 1; end $a = 2; end", { "[1]$a = 2", 52 }, { "[1]$a = 2", 52 }, 0 },
  { "on foo then if $a <= 0.2 + $b then if $c - $a >= 1 then $a = -2; end end end", { "[1]$a = -2", 72 }, { "[1]$a = -2", 72 }, 0 },
  { "on foo then if 5 == 6 then $a = 1; end $a = 2; end", { "[1]$a = 2", 44 }, { "[1]$a = 2", 44 }, 0 },
  { "on foo then if 5 == 6 then $a = 1; end if 1 == 3 then $b = 3; end $a = 2; end", { "[1]$a = 2[1]$b = 3", 60 }, { "[1]$a = 2", 60 }, 0 },
  { "if 1 == 1 then $a = 1; else $a = min(1, 2, 3); end", { "[1]$a = 1", 64 }, { "[1]$a = 1", 64 }, 0 },
  { "if 1 == 1 then $a = 1; else $a = min(max(1, 2), 2, 3); end", { "[1]$a = 2", 80 }, { "[1]$a = 1", 80 }, 0 },
  { "on bar then $a = 1; end on foo then $b = max(1, 2); bar(); end if 3 == 3 then foo(); $a = min(1, 2); end", { { "[1]$a = 1", 16 }, { "[1]$a = 1[2]$b = 2", 52 }, { "[1]$a = 1[2]$b = 2[3]$a = 1", 60 } }, { { "[1]$a = 1", 16 }, { "[1]$a = 1[2]$b = 2", 16 }, { "[1]$a = 1[2]$b = 2[3]$a = 1", 16 } }, 0 },
  { "on foo then if max(1) == max(1) then $a = 1; end end", { "[1]$a = 1", 48 }, { "[1]$a = 1", 48 }, 0 },
  { "on foo then if max($c) == 3 && max($a) then $a = 1; end end", { "[1]$a = 1", 64 }, { "[1]$a = 1", 64 }, 0 },
  { "on foo then $a = 6; end if 3 == 3 then $b = 3; end  ", { { "[1]$a = 6", 16 }, { "[2]$b = 3", 28 } }, { { "[1]$a = 6", 16 }, { "[2]$b = 3", 16 } }, 0 },
  { "on foo then $a = 6; end if 3 == 3 then foo(); $b = 3; end  ", { { "[1]$a = 6", 16 }, { "[1]$a = 6[2]$b = 3", 36 } }, { { "[1]$a = 6", 16 }, { "[1]$a = 6[2]$b = 3", 16 } }, 0 },
  { "on foo then $a = 6; end if 3 == 3 then $b = 3; foo(); end  ", { { "[1]$a = 6", 16 }, { "[1]$a = 6[2]$b = 3", 36 } }, { { "[1]$a = 6", 16 }, { "[1]$a = 6[2]$b = 3", 36 } }, 0 },
  { "on foo then $a = 6; end if 3 == 3 then foo(max(1, 2), 2); $b = 3; end  ", { { "[1]$a = 6", 16 }, { "[1]$a = 6[2]$b = 3", 72 } }, { { "[1]$a = 6", 16 }, { "[1]$a = 6[2]$b = 3", 72 } }, 0 },
  { "on foo then $a = 6; end if 3 == 3 then foo(1, 2); $b = 3; end  ", { { "[1]$a = 6", 16 }, { "[1]$a = 6[2]$b = 3", 52 } }, { { "[1]$a = 6", 16 }, { "[1]$a = 6[2]$b = 3", 52 } }, 0 },
  { "on foo then $a = coalesce($b, 0); end  ", { { "[1]$a = 2", 40 } }, { { "[1]$a = 2", 40 } }, 0 }, // FIXME
  { "on foo then if 1 == 2 then $a = 1; elseif 2 == 2 then $a = 3; else $a = 2; end end", { "[1]$a = 2", 60 }, { "[1]$a = 3", 64 }, 0 },
  { "on foo then if 2 == 2 then $c = 1; elseif 3 == 3 then $b = max(1); end end", { "[1]$c = 1[1]$b = 1", 64 }, { "[1]$c = 1", 64 } },
  { "on foo then if 3 == 3 then $a = 6; elseif 3 == 3 then $b = 1; end end on bar then if 3 == 3 then $b = 3; end end", { { "[1]$a = 6[1]$b = 1", 52 }, { "[2]$b = 3", 28 } }, { { "[1]$a = 6", 52 }, { "[2]$b = 3", 52 } }, 0 },
  { "on foo then if 1 == 1 then $a = 1; $b = 1.25; $c = 10; $d = 100; else $a = 1; end end on bar then $e = NULL; $f = max(1, 2); $g = 1 + 1.25; foo(); end", { { "[1]$a = 1[1]$b = 1.25[1]$c = 10[1]$d = 100", 60 }, { "[1]$a = 1[1]$b = 1.25[1]$c = 10[1]$d = 100[2]$e = NULL[2]$f = 2[2]$g = 2.25", 72 } }, { { "[1]$a = 1[1]$b = 1.25[1]$c = 10[1]$d = 100", 52 }, { "[1]$a = 1[1]$b = 1.25[1]$c = 10[1]$d = 100[2]$e = NULL[2]$f = 2[2]$g = 2.25", 52 } }, 0 },
  { "on foo then $a = 1; end if 3 == 3 then if 1 == 1 then foo(); end if 1 == 1 then foo(); end end", { { "[1]$a = 1", 16 }, { "[1]$a = 1", 64 } }, { { "[1]$a = 1", 52 }, { "[1]$a = 1", 52 } }, 0 },
  { "on foo then $a = 1; end if 3 == 3 then if $a == 1 then foo(); end end", { { "[1]$a = 1", 16 }, { "[1]$a = 1", 48 } }, { { "[1]$a = 1", 52 }, { "[1]$a = 1", 48 } }, 0 },
  { "if 3 == 3 then if (1 + 2) >= 3 && (1 + 2) <= $a then $a = 1; end end", { "[1]$a = 1", 68 }, { "", 64 }, 0 },
  { "on foo then $a = 1; end if 3 == 3 then foo(); if 1 == 1 then $a = 1; end end", { { "[1]$a = 1", 16 }, { "[1]$a = 1[2]$a = 1", 52 } }, { { "[1]$a = 1", 52 }, { "[1]$a = 1[2]$a = 1", 52 } }, 0 },
  { "on foo then $a = 1; end if 3 == 3 then foo(); else $a = 1; end", { { "[1]$a = 1", 16 }, { "[1]$a = 1[2]$a = 1", 44 } }, { { "[1]$a = 1", 44 }, { "[1]$a = 1", 44 } }, 0 },
  { "on foo then $a = 1; end if 3 == 3 then foo(); elseif 1 == 1 then $a = 1; end", { { "[1]$a = 1", 16 }, { "[1]$a = 1[2]$a = 1", 52 } }, { { "[1]$a = 1", 52 }, { "[1]$a = 1", 52 } }, 0 },
  { "on foo then $a = 1; end if 3 == 3 then $a = 'foo'; end", { { "[1]$a = 1", 16 }, { "[2]$a = foo", 28 } }, { { "[1]$a = 1", 16 }, { "[2]$a = foo", 28 } }, 0 },

  /*
   * Invalid rules
   */
  { "", { { NULL, 0 } }, { { NULL, 0 } }, 1 },
  { "foo", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "foo(", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "1 == 1", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo do", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if foo then", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1.1.1 == 1 then", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == ) then $a = 1", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == ) then $a = 1 end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then $a = 1 end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "elseif 1 == 1 then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if (1 == 1 then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1) then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if () then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if ( == ) then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 2 then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 + + 2 then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then max(1, 2) end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then max(1, 'a'); end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then min(1, 'a'); end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then round('a', 0); end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then round(1.2, 'a'); end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then floor('a'); end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then ceil('a'); end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then $a = coalesce(NULL, 'a') + 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then $a = 1 + coalesce(NULL, 'a'); end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if coalesce('a') == coalesce('a') then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if coalesce('a') == 1 then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == coalesce('a') then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then $a = 'foo; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then $a = \"foo'; end", { { NULL, 0 } },  { { NULL, 0 } }, -1 },
  { "if 1 == 1 then $a = 'foo\"; end", { { NULL, 0 } },  { { NULL, 0 } }, -1 },
  { "if 1 == 1 then $a = 'á'; end", { { NULL, 0 } },  { { NULL, 0 } }, -1 },
  // { "on foo then bar(); end  ", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if max(1, 2); max(1, 2); then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 3 == 3 then concat(1, 2); end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  // { "if 1 == 1 then max(1, 2) end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then $a = 1; max(1, 2) end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then $a = 1; max(1, 2) end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then max(1, 2) == 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 3 == 3 then $a = -8388609; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 3 == 3 then $a = 16777216; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then max(1, 2) == 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  // { "if 1 == 1 then $a = round(1, -1); end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if if == 1 then $a == 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if on foo then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then on foo then $a = 1; end end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then foo then $a = 1; end end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then on foo $a = 1; end end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then on then $a = 1; end end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on if 1 == 1 then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if max == 1 then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then $a = 1; foo() end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then max(1, 2 end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then max(1, == ); end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if (1 + 1) 1 then $a = 3; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then NULL; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then $a = max(1, 2)NULL; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then $a = ); end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then $a = $a $a; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then bar() $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if ( ; == 1 ) then $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 2 then $a = 1; else $a = 3; elseif $a = 2; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then elseif $a = 2; else $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then $a = if 3 == 3 then max($a, 4, 2); $b = max(1, 3); max(foo#bar); end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  /*
   * FIXME: not sure what's wrong with this
   */
  // { "on foo then if 3 == 3 then $a = 6; elseif 3 == 3 then $b = 1; end end on bar then if 3 == 3 then foo(); end end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo then elseif $a = 2; else $a = 1; end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  /*
   * FIXME
   */
  // { "on foo then if 3 == 3 then $a = 6; elseif 3 == 3 then $b = 1; end end on bar then if 3 == 3 then foo(); end end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo(1) then $a = $b; end if 3 == 3 then foo(1, 5, 6); $b = 3; end  ", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "on foo(max(1), $a) then $a = $b; end if 3 == 3 then foo(1, 5, 6); $b = 3; end  ", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then if 1 < 2 then elseif 1 == 1 then $a = 1; end end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },
  { "if 1 == 1 then if 1 < 2 then end end", { { NULL, 0 } }, { { NULL, 0 } }, -1 },

};

static int8_t is_variable(char *text, uint16_t size) {
  uint16_t i = 1;

  if(size == 7 && strncmp(text, "foo#bar", 7) == 0) {
    return 7;
  } else if(text[0] == '$' || text[0] == '@') {
    while(isalpha(text[i])) {
      i++;
    }
    return i;
  }
  return -1;
}

static int8_t is_event(char *text, uint16_t size) {
  if(size == 3 &&
    (strnicmp(text, "foo", 3) == 0 || strnicmp(text, "bar", 3) == 0)) {
    return 0;
  }
  return -1;
}

static int8_t vm_value_set(struct rules_t *obj) {
  struct varstack_t *table = (struct varstack_t *)obj->userdata;
  uint16_t x = 0;
  uint8_t type = 0;

  if(rules_gettop(obj) < 2) {
    return -1;
  }
  type = rules_type(obj, -1);

  if(rules_type(obj, -2) != VCHAR ||
    (type != VINTEGER && type != VFLOAT && type != VNULL && type != VCHAR)) {
    return -1;
  }

  const char *key = rules_tostring(obj, -2);

  if(table == NULL) {
    if((table = (struct varstack_t *)MALLOC(sizeof(struct varstack_t))) == NULL) {
      OUT_OF_MEMORY
    }
    memset(table, 0, sizeof(struct varstack_t));
    obj->userdata = table;
  }

  struct array_t *array = NULL;
  for(x=0;x<table->nr;x++) {
    if(strcmp(table->array[x].key, key) == 0) {
      array = &table->array[x];
      break;
    }
  }

  if(array == NULL) {
    if((table->array = (struct array_t *)REALLOC(table->array, sizeof(struct array_t)*(table->nr+1))) == NULL) {
      OUT_OF_MEMORY
    }
    array = &table->array[table->nr];
    memset(array, 0, sizeof(struct array_t));
    table->nr++;
    rules_ref(key);
  }

  array->key = key;

  switch(type) {
    case VINTEGER: {
      if(array->type == VCHAR && array->val.s != NULL) {
        rules_unref(array->val.s);
      }
      array->val.i = rules_tointeger(obj, -1);
      array->type = VINTEGER;

#ifdef DEBUG
      printf("%s %s = %d\n", __FUNCTION__, array->key, array->val.i);
#endif
    } break;
    case VFLOAT: {
      if(array->type == VCHAR && array->val.s != NULL) {
        rules_unref(array->val.s);
      }
      array->val.f = rules_tofloat(obj, -1);
      array->type = VFLOAT;

#ifdef DEBUG
      printf("%s %s = %g\n", __FUNCTION__, array->key, array->val.f);
#endif
    } break;
    case VCHAR: {
      if(array->type == VCHAR && array->val.s != NULL) {
        rules_unref(array->val.s);
      }

      array->val.s = rules_tostring(obj, -1);
      array->type = VCHAR;
      rules_ref(array->val.s);

#ifdef DEBUG
      printf("%s %s = %s\n", __FUNCTION__, array->key, array->val.s);
#endif
    } break;
    case VNULL: {
      if(array->type == VCHAR && array->val.s != NULL) {
        rules_unref(array->val.s);
      }
      array->val.n = NULL;
      array->type = VNULL;

#ifdef DEBUG
      printf("%s %s = NULL\n", __FUNCTION__, array->key);
#endif
    } break;
  }

  return 0;
}


static int8_t vm_value_get(struct rules_t *obj) {
  struct varstack_t *table = (struct varstack_t *)obj->userdata;
  int16_t x = 0;

  if(rules_gettop(obj) < 1) {
    return -1;
  }
  if(rules_type(obj, -1) != VCHAR) {
    return -1;
  }

  const char *key = rules_tostring(obj, -1);

  if(table == NULL) {
    if(strcmp(key, "$a") == 0) {
      rules_pushinteger(obj, 1);
    } else if(strcmp(key, "$b") == 0) {
      rules_pushinteger(obj, 2);
    } else if(strcmp(key, "$c") == 0) {
      rules_pushinteger(obj, 3);
    } else if(strcmp(key, "foo#bar") == 0) {
      rules_pushinteger(obj, 3);
    } else {
      rules_pushnil(obj);

#ifdef DEBUG
      printf("%s %s = NULL\n", __FUNCTION__, key);
#endif
    }
  } else {
    struct array_t *array = NULL;
    for(x=0;x<table->nr;x++) {
      if(strcmp(table->array[x].key, key) == 0) {
        array = &table->array[x];
        break;
      }
    }
    if(array == NULL) {
      rules_pushnil(obj);
    } else {
      switch(array->type) {
        case VINTEGER: {
          rules_pushinteger(obj, array->val.i);

#ifdef DEBUG
          printf("%s %s = %d\n", __FUNCTION__, array->key, array->val.i);
#endif
        } break;
        case VFLOAT: {
          rules_pushfloat(obj, array->val.f);

#ifdef DEBUG
          printf("%s %s = %g\n", __FUNCTION__, array->key, array->val.f);
#endif
        } break;
        case VCHAR: {
          rules_pushstring(obj, (char *)array->val.s);

#ifdef DEBUG
          printf("%s %s = %s\n", __FUNCTION__, array->key, array->val.s);
#endif
        } break;
        case VNULL: {
          rules_pushnil(obj);

#ifdef DEBUG
          printf("%s %s = NULL\n", __FUNCTION__, array->key);
#endif
        } break;
      }
    }
  }

  return 0;
}

static int8_t event_cb(struct rules_t *obj, char *name) {
  int8_t nr = rule_by_name(rules, nrrules, name);
  if(nr == -1) {
    return -1;
  }

  obj->ctx.go = rules[nr];
  rules[nr]->ctx.ret = obj;

  return 1;
}

void run_test(int *i, unsigned char *mempool, uint16_t size) {

  if(*i == 0) {
#ifdef ESP8266
    Serial.printf("[ %-*s                    %-*s ]\n", 24, " ", 25, " ");
    Serial.printf("[ %-*s Running regular test %-*s ]\n", 22, " ", 23, " ");
    Serial.printf("[ %-*s                    %-*s ]\n", 24, " ", 25, " ");
#else
    printf("[ %-*s                    %-*s ]\n", 24, " ", 25, " ");
    printf("[ %-*s Running regular test %-*s ]\n", 22, " ", 25, " ");
    printf("[ %-*s                    %-*s ]\n", 24, " ", 25, " ");
#endif
  }

  memset(&rule_options, 0, sizeof(struct rule_options_t));
  rule_options.is_variable_cb = is_variable;
  rule_options.is_event_cb = is_event;
  rule_options.vm_value_set = vm_value_set;
  rule_options.vm_value_get = vm_value_get;
  rule_options.event_cb = event_cb;

  int nrtests = sizeof(unittests)/sizeof(unittests[0]);
#ifdef ESP8266

  /*LCOV_EXCL_START*/
  if(*i >= nrtests) {
    delay(3);
    *i = 0;
  }
  /*LCOV_EXCL_STOP*/
#endif

  int len = strlen(unittests[(*i)].rule), oldoffset = 0;
  int ret = 0;

  struct pbuf mem;
  struct pbuf input;
  memset(&mem, 0, sizeof(struct pbuf));
  memset(&input, 0, sizeof(struct pbuf));

  mem.payload = mempool;
  mem.len = 0;
  mem.tot_len = size;

  uint8_t y = 0;
  uint16_t txtoffset = alignedbuffer(size-len-5);
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  if((void *)mempool >= (void *)MMU_SEC_HEAP) {
    for(y=0;y<len;y++) {
      mmu_set_uint8((void *)&(mempool[txtoffset+y]), (uint8_t)unittests[(*i)].rule[y]);
    }
  } else {
#endif
    for(y=0;y<len;y++) {
      mempool[txtoffset+y] = (uint8_t)unittests[(*i)].rule[y];
    }
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  }
#endif
  input.payload = &mempool[txtoffset];
  input.len = txtoffset;
  input.tot_len = len;

  unsigned char *cpytxt = (unsigned char *)MALLOC(len+1);
  if(cpytxt == NULL) {
    OUT_OF_MEMORY
  }
  memset(cpytxt, 0, len+1);
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  if((void *)mempool >= (void *)MMU_SEC_HEAP) {
    for(y=0;y<len;y++) {
      cpytxt[y] = mmu_get_uint8(&((unsigned char *)input.payload)[y]);
    }
  } else {
#endif
    memcpy(cpytxt, input.payload, len);
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  }
#endif
  oldoffset = txtoffset;

  while((ret = rule_initialize(&input, &rules, &nrrules, &mem, NULL)) == 0) {
    uint16_t size = getval(input.len) - oldoffset;
    uint8_t rule_nr = getval(rules[nrrules-1]->nr);

    assert(getval(rules[nrrules-1]->bc.nrbytes) >= 0);
    assert(getval(rules[nrrules-1]->bc.bufsize) >= 0);
    assert(getval(rules[nrrules-1]->bc.nrbytes) >= 0);
    assert(getval(rules[nrrules-1]->bc.bufsize) >= 0);
    assert(getval(rules[nrrules-1]->bc.nrbytes) <= getval(rules[nrrules-1]->bc.bufsize));
    assert(getval(rules[nrrules-1]->stack->nrbytes) >= 0);
    assert(getval(rules[nrrules-1]->stack->bufsize) >= 0);
    assert(getval(rules[nrrules-1]->stack->nrbytes) >= 0);
    assert(getval(rules[nrrules-1]->stack->bufsize) >= 0);

    if(size > 49) {
      size = MIN(size, 45);
      printf("Rule %.2d.%d / %.2d: [ %.*s ... %-*s ]\n", (*i)+1, getval(rules[nrrules-1]->nr), nrtests, size, cpytxt, 46-size, " ");
    } else {
      size = MIN(size, 50);
      printf("Rule %.2d.%d / %.2d: [ %.*s %-*s ]\n", (*i)+1, getval(rules[nrrules-1]->nr), nrtests, size, cpytxt, 50-size, " ");
    }

    uint8_t x = 0, y = 0, z = 0;
    memset((void *)&out, 0, 255);
    struct array_t *array = NULL;

    for(y=0;y<nrrules;y++) {
      struct varstack_t *table = (struct varstack_t *)rules[y]->userdata;
      if(table != NULL) {
        for(z=0;z<table->nr;z++) {
          array = &table->array[z];

          switch(array->type) {
            case VINTEGER: {
              x += snprintf(&out[x], 255-x, "[%d]%s = %d", y+1, array->key, array->val.i);
            } break;
            case VFLOAT: {
              x += snprintf(&out[x], 255-x, "[%d]%s = %g", y+1, array->key, array->val.f);
            } break;
            case VCHAR: {
              x += snprintf(&out[x], 255-x, "[%d]%s = %s", y+1, array->key, array->val.s);
            } break;
            case VNULL: {
               x += snprintf(&out[x], 255-x, "[%d]%s = NULL", y+1, array->key);
            } break;
          }
        }
        FREE(table->array);
        FREE(table);
        rules[y]->userdata = NULL;
      }
    }

    if(unittests[(*i)].dofail == 0 && strcmp(out, unittests[(*i)].validate[rule_nr-1].output) != 0) {
#ifdef ESP8266
      char str[OUTPUT_SIZE];
      memset(&str, 0, OUTPUT_SIZE);
      snprintf((char *)&str, OUTPUT_SIZE, "Expected: %s\nWas: %s", unittests[(*i)].validate[rule_nr-1].output, out);
      Serial.println(str); 
      exit(-1);
#else
      /*LCOV_EXCL_START*/
      printf("Expected: %s\n", unittests[(*i)].validate[rule_nr-1].output);
      printf("Was: %s\n", out);
      exit(-1);
      /*LCOV_EXCL_STOP*/
#endif
    }

#ifndef ESP8266
    /*LCOV_EXCL_START*/
    if((uint16_t)(rules[nrrules-1]->bc.nrbytes + (rules[nrrules-1]->heap->nrbytes)) != unittests[(*i)].validate[rules[nrrules-1]->nr-1].bytes) {
      printf("Expected: %d\n", unittests[(*i)].validate[rules[nrrules-1]->nr-1].bytes);
      printf("Was: %d\n", rules[nrrules-1]->bc.nrbytes + (rules[nrrules-1]->heap->nrbytes));

      exit(-1);
    }
    /*LCOV_EXCL_STOP*/
#endif

    for(x=0;x<5;x++) {
#if defined(DEBUG) && !defined(ESP8266)
      clock_gettime(CLOCK_MONOTONIC, &rules[nrrules-1]->timestamp->first);
#endif
      if(rule_run(rules[nrrules-1], 0) == -1) {
        /*LCOV_EXCL_START*/
        exit(-1);
        /*LCOV_EXCL_STOP*/
      }
#if defined(DEBUG) && !defined(ESP8266)
      clock_gettime(CLOCK_MONOTONIC, &rules[nrrules-1]->timestamp->second);

      printf("rule #%d was executed in %.6f seconds\n", rules[nrrules-1]->nr,
        ((double)rules[nrrules-1]->timestamp->second.tv_sec + 1.0e-9*rules[nrrules-1]->timestamp->second.tv_nsec) -
        ((double)rules[nrrules-1]->timestamp->first.tv_sec + 1.0e-9*rules[nrrules-1]->timestamp->first.tv_nsec));

      printf("bytecode is %d bytes\n", rules[nrrules-1]->bc.nrbytes + rules[nrrules-1]->heap->nrbytes);
#endif

#ifndef ESP8266
      /*LCOV_EXCL_START*/
      if((uint16_t)(rules[nrrules-1]->bc.nrbytes + (rules[nrrules-1]->heap->nrbytes)) != unittests[(*i)].validate[rules[nrrules-1]->nr-1].bytes) {
        printf("Expected: %d\n", unittests[(*i)].validate[rules[nrrules-1]->nr-1].bytes);
        printf("Was: %d\n", rules[nrrules-1]->bc.nrbytes + (rules[nrrules-1]->heap->nrbytes));

        exit(-1);
      }
      /*LCOV_EXCL_STOP*/
#endif

      uint8_t x = 0, y = 0, z = 0;
      memset((void *)&out, 0, 255);
      struct array_t *array = NULL;
      for(y=0;y<nrrules;y++) {
        struct varstack_t *table = (struct varstack_t *)rules[y]->userdata;
        if(table != NULL) {
          for(z=0;z<table->nr;z++) {
            array = &table->array[z];

            switch(array->type) {
              case VINTEGER: {
                x += snprintf(&out[x], 255-x, "[%d]%s = %d", y+1, array->key, array->val.i);
              } break;
              case VFLOAT: {
                x += snprintf(&out[x], 255-x, "[%d]%s = %g", y+1, array->key, array->val.f);
              } break;
              case VCHAR: {
                x += snprintf(&out[x], 255-x, "[%d]%s = %s", y+1, array->key, array->val.s);
              } break;
              case VNULL: {
                 x += snprintf(&out[x], 255-x, "[%d]%s = NULL", y+1, array->key);
              } break;
            }
          }
          FREE(table->array);
          FREE(table);
          rules[y]->userdata = NULL;
        }
      }

      if(unittests[(*i)].dofail == 0 && strcmp(out, unittests[(*i)].run[rule_nr-1].output) != 0) {
#ifdef ESP8266
        char str[OUTPUT_SIZE];
        memset(&str, 0, OUTPUT_SIZE);
        snprintf((char *)&str, OUTPUT_SIZE, "Expected: %s\nWas: %s", unittests[(*i)].run[rule_nr-1].output, out);
        Serial.println(str);
        exit(-1);
#else
        /*LCOV_EXCL_START*/
        printf("Expected: %s\n", unittests[(*i)].run[rule_nr-1].output);
        printf("Was: %s\n", out);
        exit(-1);
        /*LCOV_EXCL_STOP*/
#endif
      }
      fflush(stdout);

    }

    FREE(cpytxt);
    input.payload = &mempool[getval(input.len)];
    oldoffset = getval(input.len);
    len = getval(input.tot_len);

    if(len == 0) {
      break;
    }
    cpytxt = (unsigned char *)MALLOC(len+1);
    if(cpytxt == NULL) {
      OUT_OF_MEMORY
    }
    memset(cpytxt, 0, len+1);
    for(y=0;y<len;y++) {
      cpytxt[y] = mmu_get_uint8(&((unsigned char *)input.payload)[y]);
    }
  }

  if(unittests[(*i)].dofail != ret) {
    /*LCOV_EXCL_START*/
    exit(-1);
    /*LCOV_EXCL_STOP*/
  }

  if(ret == -1) {
    const char *rule = unittests[(*i)].rule;
    int size = strlen(unittests[(*i)].rule);
#ifdef ESP8266
    char str[OUTPUT_SIZE];
    /*LCOV_EXCL_START*/
    memset(&str, 0, OUTPUT_SIZE);
    if(size > 49) {
      size = MIN(size, 45);
      snprintf((char *)&str, OUTPUT_SIZE, "Rule %.2d.%d / %.2d: [ %.*s ... %-*s ]", (*i)+1, 1, nrtests, size, rule, 46-size, " ");
    } else {
      size = MIN(size, 50);
      snprintf((char *)&str, OUTPUT_SIZE, "Rule %.2d.%d / %.2d: [ %-*s %-*s ]", (*i)+1, 1, nrtests, size, rule, 50-size, " ");
    }
    Serial.println(str);
    /*LCOV_EXCL_STOP*/
#else
    if(size > 49) {
      size = MIN(size, 45);
      printf("Rule %.2d.%d / %.2d: [ %.*s ... %-*s ]\n", (*i)+1, 1, nrtests, size, rule, 46-size, " ");
    } else {
      size = MIN(size, 50);
      printf("Rule %.2d.%d / %.2d: [ %.*s %-*s ]\n", (*i)+1, 1, nrtests, size, rule, 50-size, " ");
    }
#endif
  }

  FREE(cpytxt);
  rules_gc(&rules, &nrrules);
}

void check_rule_name(int *i, unsigned char *mempool, uint16_t size) {
  memset(&rule_options, 0, sizeof(struct rule_options_t));
  rule_options.is_variable_cb = is_variable;
  rule_options.is_event_cb = is_event;
  rule_options.vm_value_set = vm_value_set;
  rule_options.vm_value_get = vm_value_get;
  rule_options.event_cb = event_cb;

#ifdef ESP8266
  Serial.printf("[ %-*s                    %-*s ]\n", 24, " ", 25, " ");
  Serial.printf("[ %-*s Retrieving rule name %-*s ]\n", 23, " ", 24, " ");
  Serial.printf("[ %-*s                    %-*s ]\n", 24, " ", 25, " ");
#else
  printf("[ %-*s                    %-*s ]\n", 24, " ", 25, " ");
  printf("[ %-*s Retrieving rule name %-*s ]\n", 23, " ", 24, " ");
  printf("[ %-*s                    %-*s ]\n", 24, " ", 25, " ");
#endif

  const char *rule = "on foo then $a = 1; end";

  int len = strlen(rule);
  int ret = 0;

  struct pbuf mem;
  struct pbuf input;
  memset(&mem, 0, sizeof(struct pbuf));
  memset(&input, 0, sizeof(struct pbuf));

  mem.payload = mempool;
  mem.len = 0;
  mem.tot_len = size;

  uint8_t y = 0;
  uint16_t txtoffset = alignedbuffer(size-len-5);
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  if((void *)mempool >= (void *)MMU_SEC_HEAP) {
    /*LCOV_EXCL_START*/
    for(y=0;y<len;y++) {
      mmu_set_uint8((void *)&(mempool[txtoffset+y]), (uint8_t)rule[y]);
    }
    /*LCOV_EXCL_STOP*/
  } else {
#endif
    for(y=0;y<len;y++) {
      mempool[txtoffset+y] = (uint8_t)rule[y];
    }
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  }
#endif

  input.payload = &mempool[txtoffset];
  input.len = txtoffset;
  input.tot_len = len;

  unsigned char *cpytxt = (unsigned char *)MALLOC(len+1);
  if(cpytxt == NULL) {
    OUT_OF_MEMORY
  }
  memset(cpytxt, 0, len+1);
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  if((void *)mempool >= (void *)MMU_SEC_HEAP) {
    /*LCOV_EXCL_START*/
    for(y=0;y<len;y++) {
      cpytxt[y] = mmu_get_uint8(&((unsigned char *)input.payload)[y]);
    }
    /*LCOV_EXCL_STOP*/
  } else {
#endif
    memcpy(cpytxt, input.payload, len);
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  }
#endif

  while((ret = rule_initialize(&input, &rules, &nrrules, &mem, NULL)) == 0);
  assert(ret == 1);

  const char *cpy = rule_by_nr(rules, nrrules, 0);
  if(strcmp(cpy, "foo") != 0) {
    /*LCOV_EXCL_START*/
    exit(-1);
    /*LCOV_EXCL_STOP*/
  }

  for(y=0;y<nrrules;y++) {
    struct varstack_t *table = (struct varstack_t *)rules[y]->userdata;
    if(table != NULL) {
      FREE(table->array);
      FREE(table);
      rules[y]->userdata = NULL;
    }
  }

  FREE(cpytxt);
  rules_gc(&rules, &nrrules);
}

int8_t run_two_mempools(struct pbuf *mem) {
  memset(&rule_options, 0, sizeof(struct rule_options_t));
  rule_options.is_variable_cb = is_variable;
  rule_options.is_event_cb = is_event;
  rule_options.vm_value_set = vm_value_set;
  rule_options.vm_value_get = vm_value_get;
  rule_options.event_cb = event_cb;

#ifdef ESP8266
  Serial.printf("[ %-*s                    %-*s ]\n", 24, " ", 25, " ");
  Serial.printf("[ %-*s Running two mempools test %-*s ]\n", 20, " ", 22, " ");
  Serial.printf("[ %-*s                    %-*s ]\n", 24, " ", 25, " ");
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  if((void *)mem->payload >= (void *)MMU_SEC_HEAP) {
    Serial.printf("[ %-*s Mempool 1 in second heap %-*s ]\n", 20, " ", 23, " ");
  } else {
    Serial.printf("[ %-*s Mempool 1 in first heap %-*s ]\n", 20, " ", 24, " ");
#else
    Serial.printf("[ %-*s Mempool 1 in first heap %-*s ]\n", 20, " ", 24, " ");
#endif
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  }
#endif
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  if((void *)mem->next->payload >= (void *)MMU_SEC_HEAP) {
    Serial.printf("[ %-*s Mempool 2 in second heap %-*s ]\n", 20, " ", 23, " ");
  } else {
    Serial.printf("[ %-*s Mempool 2 in first heap %-*s ]\n", 20, " ", 24, " ");
#else
    Serial.printf("[ %-*s Mempool 2 in first heap %-*s ]\n", 20, " ", 24, " ");
#endif
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  }
#endif
#else
  printf("[ %-*s                    %-*s ]\n", 24, " ", 25, " ");
  printf("[ %-*s Running two mempools test %-*s ]\n", 20, " ", 22, " ");
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  if((void *)mem->payload >= (void *)MMU_SEC_HEAP) {
    printf("[ %-*s Mempool 1 in second heap %-*s ]\n", 20, " ", 23, " ");
  } else {
    printf("[ %-*s Mempool 1 in first heap %-*s ]\n", 20, " ", 24, " ");
#else
    printf("[ %-*s Mempool 1 in first heap %-*s ]\n", 20, " ", 24, " ");
#endif
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  }
#endif
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  if((void *)mem->next->payload >= (void *)MMU_SEC_HEAP) {
    printf("[ %-*s Mempool 2 in second heap %-*s ]\n", 20, " ", 23, " ");
  } else {
    printf("[ %-*s Mempool 2 in first heap %-*s ]\n", 20, " ", 24, " ");
#else
    printf("[ %-*s Mempool 2 in first heap %-*s ]\n", 20, " ", 24, " ");
#endif
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  }
#endif
  printf("[ %-*s                    %-*s ]\n", 24, " ", 25, " ");
#endif

  const char *rule = "on foo then if 1 == 1 then $a = 1; $b = 1.25; $c = 10; $d = 100; else $a = 1; end end on bar then $e = NULL; $f = max(1, 2); $g = 1 + 1.25; foo(); end";

  int len = strlen(rule);

  int ret = 0;
  struct pbuf input;
  memset(&input, 0, sizeof(struct pbuf));

  uint8_t y = 0;
  uint16_t txtoffset = alignedbuffer(mem->tot_len-len-5);

#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  if((void *)mem->payload >= (void *)MMU_SEC_HEAP) {
    for(y=0;y<len;y++) {
      mmu_set_uint8((void *)&(((unsigned char *)mem->payload)[txtoffset+y]), (uint8_t)rule[y]);
    }
  } else {
#endif
    for(y=0;y<len;y++) {
      ((unsigned char *)mem->payload)[txtoffset+y] = (uint8_t)rule[y];
    }
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  }
#endif

  input.payload = &((unsigned char *)mem->payload)[txtoffset];
  input.len = txtoffset;
  input.tot_len = len;

  unsigned char *cpytxt = (unsigned char *)MALLOC(len+1);
  if(cpytxt == NULL) {
    OUT_OF_MEMORY
  }
  memset(cpytxt, 0, len+1);
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  if((void *)mem->payload >= (void *)MMU_SEC_HEAP) {
    for(y=0;y<len;y++) {
      cpytxt[y] = mmu_get_uint8(&((unsigned char *)input.payload)[y]);
    }
  } else {
#endif
    memcpy(cpytxt, input.payload, len);
#if (!defined(NON32XFER_HANDLER) && defined(MMU_SEC_HEAP)) || defined(COVERALLS)
  }
#endif

  while((ret = rule_initialize(&input, &rules, &nrrules, mem, NULL)) == 0) {
    input.payload = &((unsigned char *)mem->payload)[input.len];
  }

  if(ret == 1 && nrrules == 2) {
    const char *cpy = rule_by_nr(rules, nrrules, 0);
    if(strcmp(cpy, "foo") != 0) {
      /*LCOV_EXCL_START*/
      exit(-1);
      /*LCOV_EXCL_STOP*/
    }
  }

  {
    int size = strlen(rule);
#ifdef ESP8266
    char str[OUTPUT_SIZE];
    /*LCOV_EXCL_START*/
    memset(&str, 0, OUTPUT_SIZE);
    if(size > 49) {
      size = MIN(size, 45);
      snprintf((char *)&str, OUTPUT_SIZE, "Rule %.2d.%d / %.2d: [ %.*s ... %-*s ]", 0, 1, 0, size, rule, 46-size, " ");
    } else {
      size = MIN(size, 50);
      snprintf((char *)&str, OUTPUT_SIZE, "Rule %.2d.%d / %.2d: [ %-*s %-*s ]", 0, 1, 0, size, rule, 50-size, " ");
    }
    Serial.println(str);
    /*LCOV_EXCL_STOP*/
#else
    if(size > 49) {
      size = MIN(size, 45);
      printf("Rule %.2d.%d / %.2d: [ %.*s ... %-*s ]\n", 0, 1, 0, size, rule, 46-size, " ");
    } else {
      size = MIN(size, 50);
      printf("Rule %.2d.%d / %.2d: [ %.*s %-*s ]\n", 0, 1, 0, size, rule, 50-size, " ");
    }
#endif
  }

  if(ret == 1) {
#if defined(DEBUG) && !defined(ESP8266)
    clock_gettime(CLOCK_MONOTONIC, &rules[nrrules-1]->timestamp->first);
#endif

    ret = rule_run(rules[nrrules-1], 0);

#if defined(DEBUG) && !defined(ESP8266)
  clock_gettime(CLOCK_MONOTONIC, &rules[nrrules-1]->timestamp->second);

  printf("rule #%d was executed in %.6f seconds\n", 0,
    ((double)rules[0]->timestamp->second.tv_sec + 1.0e-9*rules[0]->timestamp->second.tv_nsec) -
    ((double)rules[0]->timestamp->first.tv_sec + 1.0e-9*rules[0]->timestamp->first.tv_nsec));
#endif
  }

  for(y=0;y<nrrules;y++) {
    struct varstack_t *table = (struct varstack_t *)rules[y]->userdata;
    if(table != NULL) {
      FREE(table->array);
      FREE(table);
      rules[y]->userdata = NULL;
    }
  }

  FREE(cpytxt);
  rules_gc(&rules, &nrrules);

  return ret;
}


#ifndef ESP8266
int main(int argc, char **argv) {
  int nrtests = sizeof(unittests)/sizeof(unittests[0]), i = 0;

  unsigned char *mempool = (unsigned char *)MALLOC(MEMPOOL_SIZE*2);
  if(mempool == NULL) {
    /*LCOV_EXCL_START*/
    fprintf(stderr, "OUT_OF_MEMORY\n");
    exit(-1);
    /*LCOV_EXCL_STOP*/
  }
  MMU_SEC_HEAP = &mempool[MEMPOOL_SIZE];

  for(i=0;i<nrtests;i++) {
    memset(mempool, 0, MEMPOOL_SIZE*2);
    run_test(&i, &mempool[MEMPOOL_SIZE], MEMPOOL_SIZE);
  }
  FREE(mempool);

  mempool = (unsigned char *)MALLOC(MEMPOOL_SIZE*2);
  if(mempool == NULL) {
    /*LCOV_EXCL_START*/
    fprintf(stderr, "OUT_OF_MEMORY\n");
    exit(-1);
    /*LCOV_EXCL_STOP*/
  }
  MMU_SEC_HEAP = &mempool[MEMPOOL_SIZE];

  for(i=0;i<nrtests;i++) {
    memset(mempool, 0, MEMPOOL_SIZE*2);
    run_test(&i, &mempool[0], MEMPOOL_SIZE);
  }

  memset(mempool, 0, MEMPOOL_SIZE*2);
  check_rule_name(&i, &mempool[0], MEMPOOL_SIZE);

  FREE(mempool);

  {
    uint8_t nrtests = 6;
    struct {
      uint16_t size[2];
      uint16_t used[2];
      uint8_t loc[2];
      int8_t ret;
    } tests[nrtests] = {
      { { 750, 500 }, { 372, 0 }, {1, 0}, 0 },
      { { 300, 300 }, { 176, 196 }, {0, 1}, 0 },
      { { 300, 300 }, { 176, 196 }, {1, 0}, 0 },
      { { 300, 300 }, { 176, 196 }, {1, 1}, 0 },
      { { 300, 300 }, { 176, 196 }, {0, 0}, 0 },
      { { 175, 175 }, { 0, 180 }, {0, 0}, -1 }
    };

    for(uint8_t i=0;i<nrtests;i++) {
      struct pbuf mem;
      struct pbuf mem1;
      memset(&mem, 0, sizeof(struct pbuf));
      memset(&mem1, 0, sizeof(struct pbuf));

      unsigned char *mempool = (unsigned char *)MALLOC(1000*5);
      if(mempool == NULL) {
        /*LCOV_EXCL_START*/
        fprintf(stderr, "OUT_OF_MEMORY\n");
        exit(-1);
        /*LCOV_EXCL_STOP*/
      }
      memset(mempool, 0, 1000*5);

      MMU_SEC_HEAP = &mempool[2000];

      if(tests[i].loc[0] == 1) {
        mem.payload = &mempool[3000];
      } else {
        mem.payload = &mempool[0];
      }

      mem.len = 0;
      mem.tot_len = tests[i].size[0];

      if(tests[i].loc[1] == 1) {
        mem1.payload = &mempool[2000];
      } else {
        mem1.payload = &mempool[1000];
      }

      mem1.len = 0;
      mem1.tot_len = tests[i].size[1];

      mem.next = &mem1;

      int8_t ret = run_two_mempools(&mem);

      if(ret != tests[i].ret || (ret == 0 && (mem.len != tests[i].used[0] || mem1.len != tests[i].used[1]))) {
        /*LCOV_EXCL_START*/
        fprintf(stderr, "OUT_OF_MEMORY\n");
        exit(-1);
        /*LCOV_EXCL_STOP*/
      }
      FREE(mempool);
    }
  }
  printf("All test done\n");
  return 0;
}
#endif
